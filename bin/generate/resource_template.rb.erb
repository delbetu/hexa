<%
  resource_name ||= 'Resources'
  singular_resource_name = resource_name.delete_suffix('s')
  table_name ||= 'resources'
  gql_attributes ||= {
    attr: 'String'
  }
%>

# frozen_string_literal: true

require 'shared/adapters/sequel/crud'

module Adapters
  module <%= resource_name %>
    extend Adapters::Sequel::Crud
    with(table: :<%= table_name %>)
  end
end

module Types
  class <%= singular_resource_name %> < BaseObject
    description '<%= resource_name %>'

    field :id, ID, null: false
    <% gql_attributes.each do |attr_name, attr_type| %>
      <%= "field :#{attr_name}, #{attr_type}, null: false" %>
    <% end %>
  end
end

module Resolvers
  class <%= resource_name %>Query < Resolvers::Base
    type [Types::<%= singular_resource_name %>], null: true

    def resolve
      Adapters::<%= resource_name %>.read
    end
  end
end

module Mutations
  class Create<%= singular_resource_name %> < BaseMutation
    null true

    description 'Creates a job post'

    # Input
    <% gql_attributes.each do |attr_name, attr_type| %>
      <%= "argument :#{attr_name}, #{attr_type}, required: true" %>
    <% end %>

    # Output
    field :success, Boolean, null: false
    field :errors, [String], null: true
    field :id, ID, null: true

    def resolve(posted_on:, active:, company_name:, rich_description:)
      created = Adapters::<%= resource_name %>.create(
        posted_on: posted_on,
        active: active,
        company_name: company_name,
        rich_description: rich_description
      )

      {
        success: true
      }.merge(created)
    rescue CreateError => e
      {
        success: false,
        errors: e.backtrace
      }
    end
  end

  class Update<%= singular_resource_name %> < BaseMutation
    null true

    description 'Updates a job post'

    # Input
    argument :id, ID, required: true
    <% gql_attributes.each do |attr_name, attr_type| %>
      <%= "argument :#{attr_name}, #{attr_type}, required: false" %>
    <% end %>

    # Output
    field :success, Boolean, null: false
    field :errors, [String], null: true
    field :id, ID, null: false

    def resolve(id:, posted_on: nil, active: nil, company_name: nil, rich_description: nil)
      update_attrs = {
        id: id,
        posted_on: posted_on,
        active: active,
        company_name: company_name,
        rich_description: rich_description
      }.compact
      updated = Adapters::<%= resource_name %>.update(update_attrs)

      {
        success: true
      }.merge(updated)
    rescue UpdateError => e
      {
        success: false,
        errors: e.backtrace
      }
    end
  end

  class Delete<%= singular_resource_name %> < BaseMutation
    null true

    description 'Deletes a job post'

    # Input
    argument :id, ID, required: true

    # Output
    field :success, Boolean, null: false
    field :errors, [String], null: true
    field :id, ID, null: false

    def resolve(id:)
      deleted = Adapters::<%= resource_name %>.delete(
        id: id
      )

      {
        success: true
      }.merge(deleted)
    rescue DeleteError => e
      {
        success: false,
        errors: e.backtrace
      }
    end
  end
end
